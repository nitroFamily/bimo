#!/usr/bin/env stack
-- stack --install-ghc runghc --package turtle

{-# LANGUAGE OverloadedStrings #-}

import Prelude hiding (FilePath)
import Turtle
import qualified Data.Text as T
import Filesystem.Path.CurrentOS (encode, decode)

data Args = Args ![FilePath] !FilePath ![FilePath]

parser :: Parser Args
parser = Args <$> opt parse "src" 's' "The source files"
              <*> optPath "dest" 'd' "The dest dir"
              <*> opt parse "libs" 'l' "The using libs"
  where
      parse src = return $ map decode $ T.splitOn ":" src

main = do
    (Args src dst libs) <- options "A simple build script" parser
    mapM_ buildLib libs

    let libPath = encode $ head libs
        libName = encode $ dirname $ head libs
        src' = head src
        args = [ "-o"
               , encode $ dst
               , encode $ dropExtension src' <.> "c"
               , "-I" <> libPath
               , "-L" <> libPath
               , "-l" <> libName
               ] empty

    ec <- proc "gcc" args

    unless (ec == ExitSuccess) $ error "gcc fail"

buildLib :: FilePath -> IO ()
buildLib p = do
    let name        = dirname p
        libName     = decode $ "lib" <> encode name
        srcFile     = name <.> "c"
        fullPath    = encode $ p </> srcFile
        fullPathObj = encode $ p </> name <.> "o"
        fullPathLib = encode $ p </> libName <.> "a"
        gccArgs = [ "-c"
                  , fullPath
                  , "-o"
                  , fullPathObj
                  ]
        arArgs  = [ "rcs"
                  , fullPathLib
                  , fullPathObj
                  ]
    ec <- proc "gcc" gccArgs empty
    unless (ec == ExitSuccess) $ error $ "gcc error, args: " ++ show gccArgs
    ec <- proc "ar" arArgs empty
    unless (ec == ExitSuccess) $ error $ "ar error, args: " ++ show arArgs

