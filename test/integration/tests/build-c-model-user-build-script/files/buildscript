#!/usr/bin/env stack
-- stack --install-ghc runghc --package shelly

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExtendedDefaultRules #-}
{-# LANGUAGE QuasiQuotes #-}
{-# OPTIONS_GHC -fno-warn-type-defaults #-}
import Prelude hiding (FilePath)
import Shelly
import qualified Data.Text as T
import Filesystem.Path (dirname)
import Options.Applicative
import Data.String.Interpolate
import Data.String.Interpolate.Util
default (T.Text)

data Args = Args ![T.Text] !T.Text !(Maybe [T.Text])

main = shelly $ verbosely $ do
    (Args src dst libs) <- liftIO $ execParser $ info parser idm
    let makefile = generateMakefile src dst libs
    writefile "Makefile" makefile
    run_ "make" []

parser :: Parser Args
parser = Args
    <$> option (str >>= parseSep) (long "src"
       <> short 's'
       <> metavar "SRC FILES"
       <> help "Source files")
    <*> option (str >>= parseText) (long "dst"
       <> short 'd'
       <> metavar "DST FILE"
       <> help "dest file")
    <*> optional (option (str >>= parseSep) (long "libs"
       <> short 'l'
       <> metavar "LIBS"
       <> help "Using libs"))
  where
    parseSep str = return $ T.splitOn ":" $ T.pack str
    parseText str = return $ T.pack str


generateMakefile :: [T.Text] -> T.Text -> Maybe [T.Text] -> T.Text
generateMakefile src dst Nothing =
    T.pack $ unindent [i|
        TARGET = #{dst}
        SRCS = #{T.intercalate " " src}
        OBJS = $(patsubst %.c, %.o, $(SRCS))

        all: ${TARGET}

        ${TARGET}: ${OBJS}
        	gcc ${OBJS} -o ${TARGET}
        |]
generateMakefile src dst (Just libs) =
    let libPaths   = map ("-L" <>) libs
        libHeaders = map ("-I" <>) libs
        libNames   = map ((<>) "-l" . toTextIgnore . dirname . fromText) libs
     in T.pack $ unindent [i|
        TARGET = #{dst}
        SRCS = #{T.intercalate " " src}
        OBJS = $(patsubst %.c, %.o, $(SRCS))
        LIBS_PATH = #{T.intercalate " " libPaths}
        LIBS_NAME = #{T.intercalate " " libNames}
        LIBS_HEADERS = #{T.intercalate " " libHeaders}

        all: ${TARGET}

        ${TARGET}: ${OBJS}
        	gcc $(OBJS) -o $(TARGET) $(LIBS_PATH) $(LIBS_NAME)

        .c.o:
        	gcc -c $< -o $@ $(LIBS_HEADERS)
        |]

